# vi:ft=make
LIBCSRC_DIR ?= $(SRC_DIR)/..

DEFINES           += -DL4_THREAD_SAFE -DL4_NO_RTTI=1 -D_GNU_SOURCE -DUSE_TLS=1
TARGET            := libc.a libc.so libc_nonshared.p.a
PC_FILENAME       := libc
PC_LIBS           := -lc %{static|static-pie:;:-lc_nonshared.p}
PC_EXTRA          := Link_Libs= %{static|static-pie:-lc}

REQUIRES_LIBS     := ldscripts libc_pthread l4sys l4util l4re l4re-util l4re_c \
                     l4re_c-util libc_be_l4re libc_be_l4refile \
                     libc_support_misc libc_be_fs_noop libc_be_sem_noop \
                     libc_be_sig libc_be_socket_noop libl4re-vfs

SOVERSION_libc.so := 1.0.50

PICFLAGS += -DSHARED=1

LIBC_BUILD_MODE = full

include $(LIBCSRC_DIR)/make_vars.mk
include $(LIBCSRC_DIR)/make_rules.mk
include $(LIBCSRC_DIR)/contrib_files.mk
include $(LIBCSRC_DIR)/sources.mk

# stack protector handling
ifdef CONFIG_BID_GCC_ENABLE_STACK_PROTECTOR
DEFINES           += -D__UCLIBC_HAS_SSP__=1
# signal BID that uclibc implements infrastructure for stack protector
PC_CFLAGS         := bid_allow_stack_protector
endif

DEFINES-$(CONFIG_BID_PIE) += -DSTATIC_PIE

LDFLAGS         = -z combreloc -z relro --sort-common \
		  --warn-common -static-libgcc --link-libc

LDFLAGS_NONGOLD = --warn-once --sort-section=alignment
LDFLAGS        += $(LDFLAGS_NONGOLD)

LDFLAGS_libc.so := -init __uClibc_init

# process all sources for the libc
$(eval $(call PROCESS_src_lists, $(DIRS), $(SUB_MODULES)))
# process templates for instantiated C files
$(eval $(call PROCESS_template_src, $(TMPL_DIRS), $(TMPL_MODULES)))

$(foreach ext,C S CC, \
  $(eval SRC_$(ext)_libc.so += $(LIBC_SRC_$(ext)) $(LIBC_SRC_$(ext)_libc.so)) \
  $(eval SRC_$(ext)_libc.a  += $(LIBC_SRC_$(ext)) $(LIBC_SRC_$(ext)_libc.a))  \
  $(eval SRC_$(ext)_libc_nonshared.p.a += $(LIBC_SRC_$(ext)_libc_nonshared.p.a)) \
)

SRC_C_libc.so   += $(PTHOBJ_PFX)/libc_pthread_init.c
SRC_CC_libc.a   += $(PTHOBJ_PFX)/sysdeps/generic/libc-tls.cc
SRC_C_libc.a    += $(PTHOBJ_PFX)/sysdeps/generic/dl-tls.c

SRC_C_libc.so    += libc/misc/pthread/tsd.c
SRC_C_libc.a     += libc/misc/pthread/tsd.c
SRC_S_libc.so_sparc-l4f  += libc/sysdeps/linux/sparc/sdiv.S

SRC_C_libc.so_arm-l4f    += ARCH-arm/aeabi_read_tp_generic.c
SRC_C_libc.a_arm-l4f     += ARCH-arm/aeabi_read_tp_generic.c
#SRC_S_libc.so_arm-l4f    += ARCH-arm/aeabi_read_tp-v6p.S
#SRC_S_libc.a_arm-l4f     += ARCH-arm/aeabi_read_tp-v6p.S

CXXFLAGS += -fno-rtti -fno-exceptions

CPPFLAGS_libc-tls.cc += $(LDSO_INC)
CPPFLAGS_dl-tls.c += $(LDSO_INC)

$(GENERAL_D_LOC): $(LIBCSRC_DIR_ABS)/libc/Make.rules $(LIBCSRC_DIR)/contrib_files.mk \
                  $(LIBCSRC_DIR)/make_vars.mk $(LIBCSRC_DIR)/make_rules.mk \
                  $(LIBCSRC_DIR)/sources.mk

# Gather all libraries that shall be linked into libc. We need to search them
# explicitly because no linker is involved here. Only take the first hit, like
# ld would do.
LINK_LIBC_LIBNAMES = $(call BID_PKG_CONFIG,$(OBJ_BASE),--libs -- --link-libc,$(REQUIRES_LIBS))
LINK_LIBC_LIBS = $(foreach l,$(LINK_LIBC_LIBNAMES),$(firstword $(wildcard $(addsuffix /$(l),$(L4LIBDIR)))))

OBJS_libc.a += $(LINK_LIBC_LIBS)
