name: "Moe"
binary-name: moe
anchor: l4re_servers_moe
desc: |
  Moe is the default root-task implementation for L4Re-based systems.

  *Moe* is the first task which is usually started in L4Re-based systems. The
  microkernel starts *Moe* as the Root-Task.


  ## Moe objects {#l4re_moe_objects}

  Moe provides a default implementation for the basic L4Re abstractions, such as
  data spaces (L4Re::Dataspace), region maps (L4Re::Rm), memory allocators
  (L4::Factory, L4Re::Mem_alloc), name spaces (L4Re::Namespace) and so on
  (see [L4Re Interface](#api_l4re)). These are described in the following
  subsections.

  ### Factory {#l4re_moe_factory}

  The factory in Moe is responsible for all kinds of dynamic object allocation.

  Moe's factory allows allocation of the following objects:
  - L4Re::Namespace
  - L4Re::Dataspace, RAM allocation
  - L4Re::Dma_space, memory management for DMA-capable devices
  - L4Re::Rm, virtual memory management for application tasks
  - L4::Vcon (output only)
  - L4::Scheduler, to provide a restricted priority / CPU range for clients
  - L4::Factory, to provide a quota limited allocation for clients

  > [!note]
  > L4::Scheduler objects can be only created through the user factory provided
  > by Moe to the initial application. Other factory instances cannot create
  > this object.

  #### Passing parameters to the create stream {#l4re_moe_memory_alloc_factory}

  L4::Factory.create() returns a [create stream](@ref L4::Factory::S) that
  allows arguments to be forwarded to the object creation in Moe.

  ### Namespace
  Moe provides a name space conforming to the L4Re::Namespace interface
  (see [Namespace](#api_l4re_namespace). Per default Moe creates a single name
  space for the [Boot FS](#l4re_moe_bootfs). That is available as `rom` in the
  initial objects of the init process.

  #### Boot FS {#l4re_moe_bootfs}

  The Boot FS subsystem provides access to the files loaded during the platform
  boot (or available in ROM). These files are either linked into the boot image
  or loaded via a flexible boot loader, such as GRUB.

  The subsystem provides an L4Re::Namespace object as directory and an
  L4Re::Dataspace object for each file.

  By default all files are read only and visible in the namespace *`rom`*. As
  an option, files can be supplied with the argument `:rw` to mark them as
  writable modules. Moe will allow read and write access to these dataspaces
  and make them visible in a different namespace called *`rwfs`*.

  An example entry in 'modules.list' would look like this:

  ```
  module somemodule :rw
  ```

  > [!note]
  > In order for a client to receive write permissions to the dataspace, the
  > corresponding cap also needs write permissions.
is-moe: true
server-cap-name: svr
cmds:
  - name: debug
    type: str-flags
    desc: This option enables debug messages from Moe itself.
    metavar: flags
    options:
      - 'info'
      - 'warn'
      - 'boot'
      - 'server'
      - 'exceptions'
      - 'loader'
      - 'ns'
      - 'all'
    delimiter: equals
  - name: init
    type: str
    desc: This options allows to set the init process binary.
    metavar: init_process
    default: 'rom/ned'
    delimiter: equals
  - name: l4re-dbg
    type: str-flags
    desc: |
      This option allows to set the debug options for the L4Re runtime
      environment of the init process.
    metavar: flags
    options:
      - 'info'
      - 'warn'
      - 'boot'
      - 'server'
      - 'exceptions'
      - 'loader'
      - 'ns'
      - 'all'
    delimiter: equals
  - name: ldr-flags
    type: str-flags
    desc: |
      This option allows setting some loader options for the L4Re runtime
      environment.
    metavar: flags
    options:
      - pre_alloc
      - all_segs_cow
      - pinned_segs
    delimiter: equals
  - name: brk
    type: hex
    desc: |
      This option is only present on systems without MMU. It restricts dynamic
      allocations to addresses equal or higher than `<address>`. Use it to
      prevent moe from allocating memory in regions that shall later be used by
      other applications or virtual machines.
    metavar: address
    use-prefix: false
    delimiter: equals
  - type: misc
    desc: |
      All command-line parameters after the special `--` option are passed
      directly to the init process.
    metavar: init_options
    delimiter: equals

factory:
  - obj-type: 'L4.Proto.Namespace'
    return-type: Namespace
    name: Namespace
  - obj-type: 'L4.Proto.Dataspace'
    return-type: Dataspace
    name: Dataspace
    desc: |
      Dataspaces can be allocated with an arbitrary size. The granularity for
      memory allocation however is the machine page size (#L4_PAGESIZE).
      A dataspace user must be aware that, as a result of this page-size
      granularity, there may be padding memory at the end of a dataspace which
      is accessible to each client. Moe currently allows most dataspace
      operations on this padding area. Nonetheless, the client must not make
      any assumptions about the size or content of the padding area, as this
      behaviour might change in the future.

      The provided data spaces can have different characteristics:
      - Physically contiguous and pre-allocated
      - Non contiguous and on-demand allocated with possible copy on write (COW)

      Dataspaces allocated via the Moe's factory allow mappings with any
      combination of the read-write-execute (RWX) rights, subject to a possible
      restriction of the writable right for client capabilities lacking the
      'W' right.
    params:
      - name: 'size'
        desc: Size in bytes.
        type: int
        mandatory: true
      - name: 'flags'
        desc: Special dataspace properties
        type: bitmap
        options:
          - name: Continuous
            desc: Allocate physically contiguous memory.
          - name: Pinned
            desc: Deprecated, use L4Re::Dma_space instead.
          - name: Super pages
            desc: Allocate super pages.
          - name: Fixed physical Address
            desc: |
              Allocate at fixed physical address.
              Only honored on no-MMU systems. Will fail on MMU systems.
      - name: 'align'
        desc: Log2 alignment of dataspace if supported by allocator
        type: int

  - obj-type: 'L4.Proto.Dma_space'
    return-type: Dma_space
    name: DMA space

  - obj-type: 'L4.Proto.Rm'
    return-type: Region_map
    name: Region Map

  - obj-type: 'L4.Proto.Log'
    return-type: Log
    name: Virtual console
    desc: |
      The logging facility of Moe provides per application tagged and
      synchronized log output.
    params:
      - name: 'label'
        desc: Label used as prefix for the console output.
        type: str
      - name: 'color'
        desc: Color of client's output
        type: union
        options:
          - name: 'string'
            desc: Define the color by the first character of the given string
            type: selection
            options:
              'n': gray
              'r': red
              'g': green
              'y': yellow
              'b': blue
              'm': magenta
              'c': cyan
              'w': white
              'N': black
              'R': light red
              'G': light green
              'Y': light yellow
              'B': light blue
              'M': light magenta
              'C': light cyan
              'W': bright white
          - name: 'int'
            desc: Define the color by integer.
            type: selection
            options:
              '0': gray
              '1': red
              '2': green
              '3': yellow
              '4': blue
              '5': magenta
              '6': cyan
              '7': white
              '8': black
              '9': light red
              '10': light green
              '11': light yellow
              '12': light blue
              '13': light magenta
              '14': light cyan
              '15': bright white
        default: white

  - obj-type: 'L4.Proto.Scheduler'
    return-type: Scheduler
    name: Scheduler
    desc: |
      The scheduler subsystem provides a simple scheduler proxy for scheduling
      policy enforcement.

      The priority offset provided on the creation of a scheduler proxy defines
      the minimum priority assigned to threads which are scheduled by that
      instance of the scheduler proxy. The offset is implicitly added to
      priorities provided to L4::Scheduler.run_thread().
    params:
      - name: 'limit'
        desc: Maximum priority.
        type: int
        mandatory: true
      - name: 'offset'
        desc: Priority offset.
        type: int
        mandatory: true
      - name: 'bitmap'
        desc: Bitmap of CPUs - can be repeated to address higher order CPUs
        type: int
        multiple: true

  - obj-type: 'L4.Proto.Factory'
    return-type: Factory
    name: Factory
    params:
      - name: 'quota'
        desc: |
          Limit in bytes.
          The limit is deducted from the limit of the factory that creates
          the new factory.
        type: int
        conditions:
          - desc: Must not be zero.
            conditions:
              - 0 != v
