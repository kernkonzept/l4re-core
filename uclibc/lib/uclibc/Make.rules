# vi:ft=make
LIBCSRC_DIR ?= $(SRC_DIR)

DEFINES           += -DL4_THREAD_SAFE -DL4_NO_RTTI=1 -D_GNU_SOURCE
DEFINES_x86-l4f   += -DUSE_TLS=1
DEFINES_amd64-l4f += -DUSE_TLS=1
DEFINES_arm-l4f   += -DUSE_TLS=1
DEFINES_arm64-l4f += -DUSE_TLS=1
DEFINES_mips-l4f  += -DUSE_TLS=1
DEFINES_ppc32-l4f += -DUSE_TLS=1
DEFINES_sparc-l4f += -DUSE_TLS=1
TARGET            := libc.a libc.so libc_nonshared.p.a
PC_FILENAME       := libc
PC_LIBS           := -lc %{static|static-pie:;:-lc_nonshared.p}
PC_EXTRA          := Link_Libs= %{static|static-pie:-lc}

REQUIRES_LIBS     := ldscripts libc_pthread l4sys l4util l4re l4re-util l4re_c \
                     l4re_c-util libc_be_l4re libc_be_l4refile \
                     libc_support_misc libc_be_fs_noop libc_be_sem_noop \
                     libc_be_sig libc_be_socket_noop libl4re-vfs

SOVERSION_libc.so := 1.0.50

PICFLAGS += -DSHARED=1

include $(LIBCSRC_DIR)/make_vars.mk
include $(LIBCSRC_DIR)/make_rules.mk
include $(LIBCSRC_DIR)/contrib_files.mk

# stack protector handling
ifdef CONFIG_BID_GCC_ENABLE_STACK_PROTECTOR
DEFINES           += -D__UCLIBC_HAS_SSP__=1
# signal BID that uclibc implements infrastructure for stack protector
PC_CFLAGS         := bid_allow_stack_protector
endif

DEFINES-$(CONFIG_BID_PIE) += -DSTATIC_PIE

LDFLAGS         = -z combreloc -z relro --sort-common \
		  --warn-common -static-libgcc --link-libc

LDFLAGS_NONGOLD = --warn-once --sort-section=alignment
LDFLAGS        += $(LDFLAGS_NONGOLD)

LDFLAGS_libc.so := -init __uClibc_init

DIRS := libc/string libc/inet libc/pwd_grp libc/unistd libc/signal \
        libc/stdlib libc/stdlib/malloc$(if $(CONFIG_BID_STATIC_HEAP),,-standard) libc/stdio libiconv \
	libc/misc libc/sysdeps/linux libc/termios $(if $(BID_VARIANT_FLAG_NOFPU),,libm) \
        libcrypt libuargp

SUB_MODULES := wchar large_file $(if $(BID_VARIANT_FLAG_NOFPU),,fp) \
               $(if $(UCLIBC_BUILD_MINIMAL),,locale wchar_locale)

# process all sources for the libc
$(eval $(call PROCESS_src_lists, $(DIRS), $(SUB_MODULES)))
# libm stuff
ifneq ($(BID_VARIANT_FLAG_NOFPU),y)
$(eval $(call PROCESS_template_src, libm, float double))
endif

# stack protector handling
ifdef CONFIG_BID_GCC_ENABLE_STACK_PROTECTOR
UCLIBC_SRC_C              += ssp-l4.c
SRC_C_libc.a              += libc/sysdeps/linux/common/ssp-local.c
SRC_C_libc_nonshared.p.a  += libc/sysdeps/linux/common/ssp-local.c
endif

UCLIBC_SRC_CC             += _exit.cc
UCLIBC_SRC_CC             += _dl_find_object.cc

SRC_C_libc.so          += $(UCLIBC_SRC_C) $(UCLIBC_SRC_C_libc.so)
SRC_C_libc.a           += $(UCLIBC_SRC_C) $(UCLIBC_SRC_C_libc.a)
SRC_S_libc.so          += $(UCLIBC_SRC_S) $(UCLIBC_SRC_S_libc.so)
SRC_S_libc.a           += $(UCLIBC_SRC_S) $(UCLIBC_SRC_S_libc.a)
SRC_CC_libc.so         += $(UCLIBC_SRC_CC) $(UCLIBC_SRC_CC_libc.so)
SRC_CC_libc.a          += $(UCLIBC_SRC_CC) $(UCLIBC_SRC_CC_libc.a)

SRC_C_libc.so           += $(PTHOBJ_PFX)/libc_pthread_init.c
SRC_CC_libc.a_x86-l4f   += $(PTHOBJ_PFX)/sysdeps/generic/libc-tls.cc
SRC_C_libc.a_x86-l4f    += $(PTHOBJ_PFX)/sysdeps/generic/dl-tls.c
SRC_CC_libc.a_amd64-l4f += $(PTHOBJ_PFX)/sysdeps/generic/libc-tls.cc
SRC_C_libc.a_amd64-l4f  += $(PTHOBJ_PFX)/sysdeps/generic/dl-tls.c
SRC_CC_libc.a_arm-l4f   += $(PTHOBJ_PFX)/sysdeps/generic/libc-tls.cc
SRC_C_libc.a_arm-l4f    += $(PTHOBJ_PFX)/sysdeps/generic/dl-tls.c
SRC_CC_libc.a_arm64-l4f += $(PTHOBJ_PFX)/sysdeps/generic/libc-tls.cc
SRC_C_libc.a_arm64-l4f  += $(PTHOBJ_PFX)/sysdeps/generic/dl-tls.c
SRC_CC_libc.a_mips-l4f  += $(PTHOBJ_PFX)/sysdeps/generic/libc-tls.cc
SRC_C_libc.a_mips-l4f   += $(PTHOBJ_PFX)/sysdeps/generic/dl-tls.c
SRC_CC_libc.a_ppc32-l4f += $(PTHOBJ_PFX)/sysdeps/generic/libc-tls.cc
SRC_C_libc.a_ppc32-l4f  += $(PTHOBJ_PFX)/sysdeps/generic/dl-tls.c
SRC_CC_libc.a_riscv-l4f += $(PTHOBJ_PFX)/sysdeps/generic/libc-tls.cc
SRC_C_libc.a_riscv-l4f  += $(PTHOBJ_PFX)/sysdeps/generic/dl-tls.c
SRC_CC_libc.a_sparc-l4f += $(PTHOBJ_PFX)/sysdeps/generic/libc-tls.cc
SRC_C_libc.a_sparc-l4f  += $(PTHOBJ_PFX)/sysdeps/generic/dl-tls.c

SRC_C_libc.a             += libc/stdlib/atexit.c
SRC_C_libc_nonshared.p.a += libc/stdlib/atexit.c

SRC_C_libc.so    += libc/misc/pthread/tsd.c
SRC_C_libc.a     += libc/misc/pthread/tsd.c
SRC_S_libc.so_sparc-l4f  += libc/sysdeps/linux/sparc/sdiv.S

SRC_C_libc.so_arm-l4f    += ARCH-arm/aeabi_read_tp_generic.c
SRC_C_libc.a_arm-l4f     += ARCH-arm/aeabi_read_tp_generic.c
#SRC_S_libc.so_arm-l4f    += ARCH-arm/aeabi_read_tp-v6p.S
#SRC_S_libc.a_arm-l4f     += ARCH-arm/aeabi_read_tp-v6p.S

CXXFLAGS += -fno-rtti -fno-exceptions

CPPFLAGS_libc-tls.cc += $(LDSO_INC)
CPPFLAGS_dl-tls.c += $(LDSO_INC)

UCLIBC_SRC_C += locale/locale_data.c
CPPFLAGS_locale/locale_data.c += -D__WCHAR_ENABLED -I$(LIBCSRC_DIR)/locale \
                                 -I$(LIBCSRC_DIR)/../contrib/uclibc/extra/locale

CPPFLAGS_libiconv/iconv.c += -I$(LIBCSRC_DIR)/../contrib/uclibc/libiconv/include

# for internal/utmp.h
CPPFLAGS_libc/misc/utmp/utent.c += -I$(LIBCSRC_DIR)/../contrib/uclibc/include

$(GENERAL_D_LOC): $(LIBCSRC_DIR_ABS)/Make.rules $(LIBCSRC_DIR)/contrib_files.mk \
                  $(LIBCSRC_DIR)/make_vars.mk $(LIBCSRC_DIR)/make_rules.mk

# Gather all libraries that shall be linked into libc. We need to search them
# explicitly because no linker is involved here. Only take the first hit, like
# ld would do.
LINK_LIBC_LIBNAMES = $(call BID_PKG_CONFIG,$(OBJ_BASE),--libs -- --link-libc,$(REQUIRES_LIBS))
LINK_LIBC_LIBS = $(foreach l,$(LINK_LIBC_LIBNAMES),$(firstword $(wildcard $(addsuffix /$(l),$(L4LIBDIR)))))

OBJS_libc.a += $(LINK_LIBC_LIBS)
